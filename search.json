[{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://blasbenito.github.io/collinear/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Blas Benito. Author, maintainer.","code":""},{"path":"https://blasbenito.github.io/collinear/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Benito B (2023). collinear: Multicollinearity Management Categorical Numeric Variables. R package version 1.0.0, https://blasbenito.github.io/collinear/.","code":"@Manual{,   title = {collinear: Multicollinearity Management for Categorical and Numeric Variables},   author = {Blas Benito},   year = {2023},   note = {R package version 1.0.0},   url = {https://blasbenito.github.io/collinear/}, }"},{"path":[]},{"path":"https://blasbenito.github.io/collinear/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"R package collinear combines four different methods offer comprehensive tool multicollinearity management: Bivariate correlation numeric categorical predictors: Pearson Spearman correlation methods pairs numeric predictors, Cramer’s V pairs categorical predictors. Variance Inflation Factor analysis (VIF): identify predictors linear combinations predictors. Target encoding categorical predictors: convert numeric using numeric variable response (usually response variable) handle numerics multicollinearity filtering Flexible feature prioritization: allows defining order importance predictors based specific analytic needs. methods integrated collinear() function, returns vector selected predictors controlled multicollinearity. package contains functions may useful multicollinearity management: + cor_select(): like collinear(), using pairwise correlations. + vif_select(): like collinear(), using variance inflation factors. + preference_order(): compute preference order based univariate models. + target_encoding_lab(): convert categoricals numeric using several methods. + cor_df(): generate data frame pairwise correlation scores. + cor_matrix(): convert correlation data frame matrix, obtain correlation matrix. + vif_df(): obtain data frame variance inflation factors.","code":"selected_variables <- collinear(   df, #your data frame   response, #name of your response variable   predictors, #names of your predictors,   preference_order, #your predictors in order of interest   max_cor, #maximum bivariate correlation   max_vif, #maximum variance inflation factor   encoding_method, #method to convert categoricals into numerics )"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"found package useful research work, please cite : Blas M. Benito (2023). collinear: seamless multicollinearity management numeric categorical variables. R package version 1.0.0.","code":""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"package collinear CRAN yet, submitted soon. meantime, development version can installed directly GitHub, follows.","code":"remotes::install_github(   repo = \"blasbenito/collinear\",    ref = \"development\"   )"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"multicollinearity-management-with-the-collinear-package","dir":"","previous_headings":"","what":"Multicollinearity management with the collinear package.","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"section shows basic usage package offers brief explanation methods used within.","code":"library(collinear) library(dplyr) library(tictoc)"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"example-data","dir":"","previous_headings":"Multicollinearity management with the collinear package.","what":"Example data","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"package shipped data frame named vi, 30.000 records, 67 columns mixture types. response variables “vi_mean”, “vi_max”, “vi_min”, “vi_range”, statistics vegetation index named NDVI. predictors stored character vector vi_predictors.","code":"dplyr::glimpse(vi) ## Rows: 30,000 ## Columns: 67 ## $ longitude                  <dbl> -114.254306, 114.845693, -122.145972, 108.3… ## $ latitude                   <dbl> 45.0540272, 26.2706940, 56.3790272, 29.9456… ## $ vi_mean                    <dbl> 0.38, 0.53, 0.45, 0.69, 0.42, 0.68, 0.70, 0… ## $ vi_max                     <dbl> 0.57, 0.67, 0.65, 0.85, 0.64, 0.78, 0.77, 0… ## $ vi_min                     <dbl> 0.12, 0.41, 0.25, 0.50, 0.25, 0.48, 0.60, 0… ## $ vi_range                   <dbl> 0.45, 0.26, 0.40, 0.34, 0.39, 0.31, 0.17, 0… ## $ koppen_zone                <chr> \"BSk\", \"Cfa\", \"Dfc\", \"Cfb\", \"Aw\", \"Cfa\", \"A… ## $ koppen_group               <chr> \"Arid\", \"Temperate\", \"Cold\", \"Temperate\", \"… ## $ koppen_description         <chr> \"steppe, cold\", \"no dry season, hot summer\"… ## $ soil_type                  <chr> \"Cambisols\", \"Acrisols\", \"Luvisols\", \"Aliso… ## $ topo_slope                 <int> 6, 2, 0, 10, 0, 10, 6, 0, 2, 0, 0, 1, 0, 1,… ## $ topo_diversity             <int> 29, 24, 21, 25, 19, 30, 26, 20, 26, 22, 25,… ## $ topo_elevation             <int> 1821, 143, 765, 1474, 378, 485, 604, 1159, … ## $ swi_mean                   <dbl> 27.5, 56.1, 41.4, 59.3, 37.4, 56.3, 52.3, 2… ## $ swi_max                    <dbl> 62.9, 74.4, 81.9, 81.1, 83.2, 73.8, 55.8, 3… ## $ swi_min                    <dbl> 24.5, 33.3, 42.2, 31.3, 8.3, 28.8, 25.3, 11… ## $ swi_range                  <dbl> 38.4, 41.2, 39.7, 49.8, 74.9, 45.0, 30.5, 2… ## $ soil_temperature_mean      <dbl> 4.8, 19.9, 1.2, 13.0, 28.2, 18.1, 21.5, 23.… ## $ soil_temperature_max       <dbl> 29.9, 32.6, 20.4, 24.6, 41.6, 29.1, 26.4, 4… ## $ soil_temperature_min       <dbl> -12.4, 3.9, -16.0, -0.4, 16.8, 4.1, 17.3, 5… ## $ soil_temperature_range     <dbl> 42.3, 28.8, 36.4, 25.0, 24.8, 24.9, 9.1, 38… ## $ soil_sand                  <int> 41, 39, 27, 29, 48, 33, 30, 78, 23, 64, 54,… ## $ soil_clay                  <int> 20, 24, 28, 31, 27, 29, 40, 15, 26, 22, 23,… ## $ soil_silt                  <int> 38, 35, 43, 38, 23, 36, 29, 6, 49, 13, 22, … ## $ soil_ph                    <dbl> 6.5, 5.9, 5.6, 5.5, 6.5, 5.8, 5.2, 7.1, 7.3… ## $ soil_soc                   <dbl> 43.1, 14.6, 36.4, 34.9, 8.1, 20.8, 44.5, 4.… ## $ soil_nitrogen              <dbl> 2.8, 1.3, 2.9, 3.6, 1.2, 1.9, 2.8, 0.6, 3.1… ## $ solar_rad_mean             <dbl> 17.634, 19.198, 13.257, 14.163, 24.512, 17.… ## $ solar_rad_max              <dbl> 31.317, 24.498, 25.283, 17.237, 28.038, 22.… ## $ solar_rad_min              <dbl> 5.209, 13.311, 1.587, 9.642, 19.102, 12.196… ## $ solar_rad_range            <dbl> 26.108, 11.187, 23.696, 7.595, 8.936, 10.20… ## $ growing_season_length      <dbl> 139, 365, 164, 333, 228, 365, 365, 60, 365,… ## $ growing_season_temperature <dbl> 12.65, 19.35, 11.55, 12.45, 26.45, 17.75, 2… ## $ growing_season_rainfall    <dbl> 224.5, 1493.4, 345.4, 1765.5, 984.4, 1860.5… ## $ growing_degree_days        <dbl> 2140.5, 7080.9, 2053.2, 4162.9, 10036.7, 64… ## $ temperature_mean           <dbl> 3.65, 19.35, 1.45, 11.35, 27.55, 17.65, 22.… ## $ temperature_max            <dbl> 24.65, 33.35, 21.15, 23.75, 38.35, 30.55, 2… ## $ temperature_min            <dbl> -14.05, 3.05, -18.25, -3.55, 19.15, 2.45, 1… ## $ temperature_range          <dbl> 38.7, 30.3, 39.4, 27.3, 19.2, 28.1, 7.0, 29… ## $ temperature_seasonality    <dbl> 882.6, 786.6, 1070.9, 724.7, 219.3, 747.2, … ## $ rainfall_mean              <int> 446, 1493, 560, 1794, 990, 1860, 3150, 356,… ## $ rainfall_min               <int> 25, 37, 24, 29, 0, 60, 122, 1, 10, 12, 0, 0… ## $ rainfall_max               <int> 62, 209, 87, 293, 226, 275, 425, 62, 256, 3… ## $ rainfall_range             <int> 37, 172, 63, 264, 226, 215, 303, 61, 245, 2… ## $ evapotranspiration_mean    <dbl> 78.32, 105.88, 50.03, 64.65, 156.60, 108.50… ## $ evapotranspiration_max     <dbl> 164.70, 190.86, 117.53, 115.79, 187.71, 191… ## $ evapotranspiration_min     <dbl> 13.67, 50.44, 3.53, 28.01, 128.59, 51.39, 8… ## $ evapotranspiration_range   <dbl> 151.03, 140.42, 113.99, 87.79, 59.13, 139.9… ## $ cloud_cover_mean           <int> 31, 48, 42, 64, 38, 52, 60, 13, 53, 20, 11,… ## $ cloud_cover_max            <int> 39, 61, 49, 71, 58, 67, 77, 18, 60, 27, 23,… ## $ cloud_cover_min            <int> 16, 34, 33, 54, 19, 39, 45, 6, 45, 14, 2, 1… ## $ cloud_cover_range          <int> 23, 27, 15, 17, 38, 27, 32, 11, 15, 12, 21,… ## $ aridity_index              <dbl> 0.54, 1.27, 0.90, 2.08, 0.55, 1.67, 2.88, 0… ## $ humidity_mean              <dbl> 55.56, 62.14, 59.87, 69.32, 51.60, 62.76, 7… ## $ humidity_max               <dbl> 63.98, 65.00, 68.19, 71.90, 67.07, 65.68, 7… ## $ humidity_min               <dbl> 48.41, 58.97, 53.75, 67.21, 33.89, 59.92, 7… ## $ humidity_range             <dbl> 15.57, 6.03, 14.44, 4.69, 33.18, 5.76, 3.99… ## $ biogeo_ecoregion           <chr> \"South Central Rockies forests\", \"Jian Nan … ## $ biogeo_biome               <chr> \"Temperate Conifer Forests\", \"Tropical & Su… ## $ biogeo_realm               <chr> \"Nearctic\", \"Indomalayan\", \"Nearctic\", \"Pal… ## $ country_name               <chr> \"United States of America\", \"China\", \"Canad… ## $ country_population         <dbl> 313973000, 1338612970, 33487208, 1338612970… ## $ country_gdp                <dbl> 15094000, 7973000, 1300000, 7973000, 15860,… ## $ country_income             <chr> \"1. High income: OECD\", \"3. Upper middle in… ## $ continent                  <chr> \"North America\", \"Asia\", \"North America\", \"… ## $ region                     <chr> \"Americas\", \"Asia\", \"Americas\", \"Asia\", \"Af… ## $ subregion                  <chr> \"Northern America\", \"Eastern Asia\", \"Northe… vi_predictors ##  [1] \"koppen_zone\"                \"koppen_group\"               ##  [3] \"koppen_description\"         \"soil_type\"                  ##  [5] \"topo_slope\"                 \"topo_diversity\"             ##  [7] \"topo_elevation\"             \"swi_mean\"                   ##  [9] \"swi_max\"                    \"swi_min\"                    ## [11] \"swi_range\"                  \"soil_temperature_mean\"      ## [13] \"soil_temperature_max\"       \"soil_temperature_min\"       ## [15] \"soil_temperature_range\"     \"soil_sand\"                  ## [17] \"soil_clay\"                  \"soil_silt\"                  ## [19] \"soil_ph\"                    \"soil_soc\"                   ## [21] \"soil_nitrogen\"              \"solar_rad_mean\"             ## [23] \"solar_rad_max\"              \"solar_rad_min\"              ## [25] \"solar_rad_range\"            \"growing_season_length\"      ## [27] \"growing_season_temperature\" \"growing_season_rainfall\"    ## [29] \"growing_degree_days\"        \"temperature_mean\"           ## [31] \"temperature_max\"            \"temperature_min\"            ## [33] \"temperature_range\"          \"temperature_seasonality\"    ## [35] \"rainfall_mean\"              \"rainfall_min\"               ## [37] \"rainfall_max\"               \"rainfall_range\"             ## [39] \"evapotranspiration_mean\"    \"evapotranspiration_max\"     ## [41] \"evapotranspiration_min\"     \"evapotranspiration_range\"   ## [43] \"cloud_cover_mean\"           \"cloud_cover_max\"            ## [45] \"cloud_cover_min\"            \"cloud_cover_range\"          ## [47] \"aridity_index\"              \"humidity_mean\"              ## [49] \"humidity_max\"               \"humidity_min\"               ## [51] \"humidity_range\"             \"biogeo_ecoregion\"           ## [53] \"biogeo_biome\"               \"biogeo_realm\"               ## [55] \"country_name\"               \"country_population\"         ## [57] \"country_gdp\"                \"country_income\"             ## [59] \"continent\"                  \"region\"                     ## [61] \"subregion\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"collinear","dir":"","previous_headings":"Multicollinearity management with the collinear package.","what":"collinear()","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"collinear() function contains functionality required robust multicollinearity management.","code":""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"input-arguments","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear()","what":"Input arguments","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"function takes inputs: df: data frame predictors, preferably, response (later). response: name response variable, relevant highly recommended categorical variables within predictors. predictors: names predictors involved multicollinearity analysis. preference_order: names predictors user’s order preference. need name predictors predictors! cor_method: usually “pearson”, also “spearman” accepted. max_cor: maximum correlation allowed two predictors. max_vif: maximum VIF allowed predictor. encoding_method: method used convert categorical variables numeric. relevant response provided. default, group categorical variable encoded mean response across group. code shows quick example. Notice argument preference_order left NULL, explained later. function returned list predictors correlation lower 0.75 , VIF lower 5. Let’s see ’s true. function cor_df() returns data frame pairwise correlations, arranged absolute value correlation. data frame shows maximum correlation two selected predictors 0.75, collinear() worked expected. function vif_df() returns data frame VIF scores predictors. output shows maximum VIF 4.2, collinear() work expected.","code":"selected_predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = NULL,   max_cor = 0.75,   max_vif = 5,   encoding_method = \"mean\" )  selected_predictors ##  [1] \"country_income\"             \"topo_diversity\"             ##  [3] \"topo_slope\"                 \"humidity_range\"             ##  [5] \"topo_elevation\"             \"country_gdp\"                ##  [7] \"country_population\"         \"soil_soc\"                   ##  [9] \"region\"                     \"soil_type\"                  ## [11] \"soil_clay\"                  \"subregion\"                  ## [13] \"biogeo_realm\"               \"soil_sand\"                  ## [15] \"swi_min\"                    \"soil_nitrogen\"              ## [17] \"swi_range\"                  \"cloud_cover_range\"          ## [19] \"rainfall_min\"               \"growing_season_temperature\" ## [21] \"solar_rad_max\"              \"solar_rad_min\"              ## [23] \"rainfall_range\" selected_predictors_cor <- cor_df(   df = vi,   response = \"vi_mean\",   predictors = selected_predictors ) head(selected_predictors_cor) ## # A tibble: 6 × 3 ##   x             y                          correlation ##   <chr>         <chr>                            <dbl> ## 1 solar_rad_min growing_season_temperature       0.744 ## 2 soil_nitrogen soil_soc                         0.729 ## 3 soil_nitrogen swi_min                          0.673 ## 4 soil_sand     soil_clay                       -0.666 ## 5 solar_rad_max soil_type                       -0.652 ## 6 biogeo_realm  soil_type                        0.62 selected_predictors_vif <- vif_df(   df = vi,   response = \"vi_mean\",   predictors = selected_predictors ) selected_predictors_vif ##                      variable   vif ## 1              country_income 1.211 ## 2              topo_diversity 1.635 ## 3                  topo_slope 1.928 ## 4              humidity_range 1.959 ## 5              topo_elevation 2.073 ## 6                 country_gdp 2.157 ## 7          country_population 2.169 ## 8                rainfall_min 2.256 ## 9           cloud_cover_range 2.393 ## 10             rainfall_range 2.716 ## 11                   soil_soc 2.744 ## 12                     region 2.846 ## 13                  subregion 2.870 ## 14                  soil_type 2.874 ## 15                  soil_clay 2.966 ## 16               biogeo_realm 3.120 ## 17              solar_rad_max 3.126 ## 18                    swi_min 3.138 ## 19                  soil_sand 3.170 ## 20                  swi_range 3.263 ## 21              soil_nitrogen 3.372 ## 22 growing_season_temperature 4.271 ## 23              solar_rad_min 4.287"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"permissive-versus-restrictive-multicollinearity-filtering","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear()","what":"Permissive versus restrictive multicollinearity filtering","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"arguments max_cor max_vif control intensity multicollinearity filtering. variables selected restrictive setup: variables selected permissive setup: expected, restrictive setup resulted smaller set selected predictors. hard rules max_cor max_vif, selection depend objective analysis nature predictors.","code":"#restrictive setup selected_predictors_restrictive <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.5,   max_vif = 2.5 )  #permissive setup selected_predictors_permissive <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.9,   max_vif = 10 ) selected_predictors_restrictive ##  [1] \"country_income\"             \"soil_clay\"                  ##  [3] \"country_population\"         \"region\"                     ##  [5] \"soil_soc\"                   \"topo_slope\"                 ##  [7] \"growing_season_temperature\" \"humidity_range\"             ##  [9] \"cloud_cover_range\"          \"topo_elevation\" selected_predictors_permissive ##  [1] \"country_income\"             \"topo_diversity\"             ##  [3] \"topo_slope\"                 \"country_population\"         ##  [5] \"country_gdp\"                \"soil_soc\"                   ##  [7] \"region\"                     \"soil_type\"                  ##  [9] \"soil_nitrogen\"              \"subregion\"                  ## [11] \"topo_elevation\"             \"biogeo_realm\"               ## [13] \"koppen_group\"               \"biogeo_biome\"               ## [15] \"country_name\"               \"soil_ph\"                    ## [17] \"growing_season_temperature\" \"aridity_index\"              ## [19] \"soil_temperature_max\"       \"rainfall_min\"               ## [21] \"rainfall_range\"             \"swi_mean\"                   ## [23] \"temperature_max\"            \"solar_rad_mean\"             ## [25] \"soil_clay\"                  \"soil_silt\"                  ## [27] \"cloud_cover_min\"            \"swi_range\"                  ## [29] \"humidity_range\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"the-importance-of-the-response-argument","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear()","what":"The importance of the response argument","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"response argument used encode categorical variables numeric. omitted, collinear() function ignores categorical variables. However, function cor_select() can help suitable response variable data frame. option discussed end section. argument response used, output may contain categorical predictors (tagged <chr>, “character” ). However, argument response ignored, categorical predictors ignored. categorical variables data frame, suitable response variable, function cor_select() can handle multicollinearity management via pairwise correlations, MUCH higher computational cost, different results, shown . variable selection results differ numeric representations categorical variables rather different two options. response provided, function cor_select() compares categoricals numerics encoding categorical numeric, compares pairs categoricals using Cramer’s V, implemented function cramer_v(). Additionally, Cramer’s V values directly comparable Pearson Spearman correlation scores, together analysis might induce bias variable selection. using response argument always last option.","code":"selected_predictors_response <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors )  selected_predictors_no_response <- collinear(   df = vi,   predictors = vi_predictors ) dplyr::glimpse(vi[, selected_predictors_response]) ## Rows: 30,000 ## Columns: 23 ## $ country_income             <chr> \"1. High income: OECD\", \"3. Upper middle in… ## $ topo_diversity             <int> 29, 24, 21, 25, 19, 30, 26, 20, 26, 22, 25,… ## $ topo_slope                 <int> 6, 2, 0, 10, 0, 10, 6, 0, 2, 0, 0, 1, 0, 1,… ## $ humidity_range             <dbl> 15.57, 6.03, 14.44, 4.69, 33.18, 5.76, 3.99… ## $ topo_elevation             <int> 1821, 143, 765, 1474, 378, 485, 604, 1159, … ## $ country_gdp                <dbl> 15094000, 7973000, 1300000, 7973000, 15860,… ## $ country_population         <dbl> 313973000, 1338612970, 33487208, 1338612970… ## $ soil_soc                   <dbl> 43.1, 14.6, 36.4, 34.9, 8.1, 20.8, 44.5, 4.… ## $ region                     <chr> \"Americas\", \"Asia\", \"Americas\", \"Asia\", \"Af… ## $ soil_type                  <chr> \"Cambisols\", \"Acrisols\", \"Luvisols\", \"Aliso… ## $ soil_clay                  <int> 20, 24, 28, 31, 27, 29, 40, 15, 26, 22, 23,… ## $ subregion                  <chr> \"Northern America\", \"Eastern Asia\", \"Northe… ## $ biogeo_realm               <chr> \"Nearctic\", \"Indomalayan\", \"Nearctic\", \"Pal… ## $ soil_sand                  <int> 41, 39, 27, 29, 48, 33, 30, 78, 23, 64, 54,… ## $ swi_min                    <dbl> 24.5, 33.3, 42.2, 31.3, 8.3, 28.8, 25.3, 11… ## $ soil_nitrogen              <dbl> 2.8, 1.3, 2.9, 3.6, 1.2, 1.9, 2.8, 0.6, 3.1… ## $ swi_range                  <dbl> 38.4, 41.2, 39.7, 49.8, 74.9, 45.0, 30.5, 2… ## $ cloud_cover_range          <int> 23, 27, 15, 17, 38, 27, 32, 11, 15, 12, 21,… ## $ rainfall_min               <int> 25, 37, 24, 29, 0, 60, 122, 1, 10, 12, 0, 0… ## $ growing_season_temperature <dbl> 12.65, 19.35, 11.55, 12.45, 26.45, 17.75, 2… ## $ solar_rad_max              <dbl> 31.317, 24.498, 25.283, 17.237, 28.038, 22.… ## $ solar_rad_min              <dbl> 5.209, 13.311, 1.587, 9.642, 19.102, 12.196… ## $ rainfall_range             <int> 37, 172, 63, 264, 226, 215, 303, 61, 245, 2… dplyr::glimpse(vi[, selected_predictors_no_response]) ## Rows: 30,000 ## Columns: 18 ## $ topo_diversity             <int> 29, 24, 21, 25, 19, 30, 26, 20, 26, 22, 25,… ## $ country_population         <dbl> 313973000, 1338612970, 33487208, 1338612970… ## $ country_gdp                <dbl> 15094000, 7973000, 1300000, 7973000, 15860,… ## $ topo_slope                 <int> 6, 2, 0, 10, 0, 10, 6, 0, 2, 0, 0, 1, 0, 1,… ## $ humidity_range             <dbl> 15.57, 6.03, 14.44, 4.69, 33.18, 5.76, 3.99… ## $ soil_soc                   <dbl> 43.1, 14.6, 36.4, 34.9, 8.1, 20.8, 44.5, 4.… ## $ soil_clay                  <int> 20, 24, 28, 31, 27, 29, 40, 15, 26, 22, 23,… ## $ swi_range                  <dbl> 38.4, 41.2, 39.7, 49.8, 74.9, 45.0, 30.5, 2… ## $ soil_sand                  <int> 41, 39, 27, 29, 48, 33, 30, 78, 23, 64, 54,… ## $ topo_elevation             <int> 1821, 143, 765, 1474, 378, 485, 604, 1159, … ## $ swi_min                    <dbl> 24.5, 33.3, 42.2, 31.3, 8.3, 28.8, 25.3, 11… ## $ soil_nitrogen              <dbl> 2.8, 1.3, 2.9, 3.6, 1.2, 1.9, 2.8, 0.6, 3.1… ## $ cloud_cover_range          <int> 23, 27, 15, 17, 38, 27, 32, 11, 15, 12, 21,… ## $ solar_rad_max              <dbl> 31.317, 24.498, 25.283, 17.237, 28.038, 22.… ## $ growing_season_temperature <dbl> 12.65, 19.35, 11.55, 12.45, 26.45, 17.75, 2… ## $ rainfall_min               <int> 25, 37, 24, 29, 0, 60, 122, 1, 10, 12, 0, 0… ## $ solar_rad_min              <dbl> 5.209, 13.311, 1.587, 9.642, 19.102, 12.196… ## $ rainfall_range             <int> 37, 172, 63, 264, 226, 215, 303, 61, 245, 2… tictoc::tic() selected_predictors_response <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors ) tictoc::toc() ## 0.417 sec elapsed tictoc::tic() selected_predictors_no_response <- cor_select(   df = vi,   predictors = vi_predictors ) tictoc::toc() ## 34.645 sec elapsed selected_predictors_response ##  [1] \"country_population\"         \"topo_elevation\"             ##  [3] \"country_income\"             \"country_gdp\"                ##  [5] \"topo_slope\"                 \"humidity_range\"             ##  [7] \"soil_clay\"                  \"topo_diversity\"             ##  [9] \"soil_sand\"                  \"cloud_cover_range\"          ## [11] \"region\"                     \"growing_season_temperature\" ## [13] \"solar_rad_min\"              \"soil_soc\"                   ## [15] \"rainfall_min\"               \"swi_range\"                  ## [17] \"soil_nitrogen\"              \"rainfall_range\"             ## [19] \"swi_min\"                    \"subregion\"                  ## [21] \"biogeo_realm\"               \"cloud_cover_min\"            ## [23] \"soil_type\"                  \"aridity_index\"              ## [25] \"solar_rad_max\" selected_predictors_no_response ##  [1] \"topo_elevation\"             \"topo_slope\"                 ##  [3] \"country_population\"         \"topo_diversity\"             ##  [5] \"soil_clay\"                  \"humidity_range\"             ##  [7] \"soil_sand\"                  \"country_gdp\"                ##  [9] \"cloud_cover_range\"          \"country_income\"             ## [11] \"rainfall_min\"               \"soil_soc\"                   ## [13] \"swi_range\"                  \"growing_season_temperature\" ## [15] \"rainfall_range\"             \"soil_nitrogen\"              ## [17] \"solar_rad_min\"              \"aridity_index\"              ## [19] \"cloud_cover_min\"            \"temperature_max\"            ## [21] \"region\"                     \"swi_min\"                    ## [23] \"solar_rad_max\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"working-with-a-preference-order","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear()","what":"Working with a preference order","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"argument preference_order gives user control predictors removed first predictors kept multicollinearity filtering. argument accepts vector predictor names order interest, result function preference_order(), allows define preference order following quantitative criteria.","code":""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"manual-preference-order","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear() > Working with a preference order","what":"Manual preference order","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"Let’s start former option. , argument preference_order names several predictors importance hypothetical analysis. predictors preference_order ranked absolute sum correlations predictors pairwise correlation filtering, VIF VIF-based filtering. Notice output, two variables preference_order selected (“soil_temperature_mean” “soil_type”), one removed (“soil_temperature_max”). happens point selection, VIF “soil_temperature_mean” “soil_temperature_max” higher max_vif, one lower preference removed.","code":"selected_predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = c(     \"soil_temperature_mean\",     \"soil_temperature_max\",     \"soil_type\"   ) )  selected_predictors ##  [1] \"soil_temperature_mean\" \"soil_temperature_max\"  \"soil_type\"             ##  [4] \"country_population\"    \"topo_elevation\"        \"country_income\"        ##  [7] \"country_gdp\"           \"topo_slope\"            \"humidity_range\"        ## [10] \"soil_clay\"             \"topo_diversity\"        \"soil_sand\"             ## [13] \"cloud_cover_range\"     \"region\"                \"soil_soc\"              ## [16] \"rainfall_min\"          \"swi_range\"             \"soil_nitrogen\"         ## [19] \"rainfall_range\"        \"subregion\"             \"biogeo_realm\"          ## [22] \"aridity_index\"         \"solar_rad_max\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"quantitative-preference-order","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear() > Working with a preference order","what":"Quantitative preference order","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"function preference_order() requires response argument, takes function f returns value association response predictor. value located “preference” column function’s output. result preference_order() can plugged right away preference_order argument collinear. variable selection satisfies three conditions : maximum correlation predictor response, maximum pairwise correlation, maximum VIF. f argument used default function f_rsquared(), returns R-squared response predictor. two f functions implemented: f_ga_deviance(): returns explained deviance univariate GAM model response predictor, fitted function mgcv::gam(). R package mgcv installed system. f_rf_deviance(): returns explained deviance univariate Random Forest model response predictor, fitted function ranger::ranger(). R package ranger installed system. Custom functions created user also accepted input, long x, y, df arguments, return single numeric value. can run parallel across predictors increasing value workers argument R packages future future.apply installed system.","code":"preference_rsquared <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared,   workers = 1 #requires package future and future.apply for more workers )  preference_rsquared ##                     predictor   preference ## 1            biogeo_ecoregion 0.8971347093 ## 2       growing_season_length 0.8076216576 ## 3                 koppen_zone 0.8050280970 ## 4          koppen_description 0.7903458680 ## 5                     soil_ph 0.7664428862 ## 6                    swi_mean 0.7286901614 ## 7               humidity_mean 0.7141389404 ## 8                koppen_group 0.6996959734 ## 9                biogeo_biome 0.6515724588 ## 10               country_name 0.6448346803 ## 11           cloud_cover_mean 0.6338773126 ## 12                  soil_type 0.6318025761 ## 13              rainfall_mean 0.6005761078 ## 14               humidity_max 0.5876622545 ## 15       soil_temperature_max 0.5827628810 ## 16                    swi_max 0.5813558512 ## 17            cloud_cover_max 0.5758002449 ## 18               humidity_min 0.5705720164 ## 19    growing_season_rainfall 0.5697006759 ## 20     soil_temperature_range 0.5523074848 ## 21               biogeo_realm 0.5031101984 ## 22              solar_rad_max 0.4905225950 ## 23     evapotranspiration_max 0.4814731607 ## 24               rainfall_max 0.4783927311 ## 25              aridity_index 0.4506424015 ## 26                  subregion 0.4469207404 ## 27                  swi_range 0.4217411381 ## 28            cloud_cover_min 0.4135724066 ## 29   evapotranspiration_range 0.4042241481 ## 30          temperature_range 0.3753489250 ## 31             rainfall_range 0.3545446680 ## 32    temperature_seasonality 0.2499469281 ## 33               rainfall_min 0.2484813976 ## 34                    swi_min 0.2406964836 ## 35             solar_rad_mean 0.2140860965 ## 36              soil_nitrogen 0.1872886789 ## 37                  continent 0.1818717607 ## 38            temperature_max 0.1589418736 ## 39                     region 0.1505256024 ## 40                   soil_soc 0.1493958026 ## 41    evapotranspiration_mean 0.1455828419 ## 42            solar_rad_range 0.1300751363 ## 43            temperature_min 0.1222051434 ## 44          cloud_cover_range 0.1216812855 ## 45       soil_temperature_min 0.1018471531 ## 46             topo_diversity 0.0925948262 ## 47                  soil_clay 0.0769366113 ## 48             humidity_range 0.0575393339 ## 49             country_income 0.0489946403 ## 50                  soil_sand 0.0427943817 ## 51             topo_elevation 0.0424759731 ## 52 growing_season_temperature 0.0239161476 ## 53                 topo_slope 0.0203697134 ## 54      soil_temperature_mean 0.0170527033 ## 55           temperature_mean 0.0067479780 ## 56                  soil_silt 0.0059316757 ## 57        growing_degree_days 0.0047849144 ## 58     evapotranspiration_min 0.0009965488 ## 59                country_gdp 0.0008850479 ## 60              solar_rad_min 0.0005751350 ## 61         country_population 0.0002513147 selected_predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference_rsquared ) selected_predictors ##  [1] \"biogeo_ecoregion\"       \"soil_temperature_range\" \"rainfall_min\"           ##  [4] \"solar_rad_mean\"         \"soil_nitrogen\"          \"continent\"              ##  [7] \"soil_soc\"               \"cloud_cover_range\"      \"topo_diversity\"         ## [10] \"soil_clay\"              \"humidity_range\"         \"country_income\"         ## [13] \"soil_sand\"              \"topo_elevation\"         \"topo_slope\"             ## [16] \"country_gdp\"            \"country_population\" f_rsquared(   x = \"growing_season_length\",   y = \"vi_mean\",   df = vi ) ## [1] 0.8076217"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"cor_select-and-vif_select","dir":"","previous_headings":"Multicollinearity management with the collinear package.","what":"cor_select() and vif_select()","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"functions cor_select() vif_select(), called within collinear(), perform pairwise correlation filtering, VIF-based filtering. main difference cor_select() can handle categorical predictors even response omitted, vif_select() ignores entirely case.","code":"selected_predictors_cor <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference_rsquared )  selected_predictors_vif <- vif_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference_rsquared ) selected_predictors_cor ##  [1] \"biogeo_ecoregion\"       \"soil_temperature_range\" \"rainfall_min\"           ##  [4] \"solar_rad_mean\"         \"soil_nitrogen\"          \"continent\"              ##  [7] \"soil_soc\"               \"cloud_cover_range\"      \"topo_diversity\"         ## [10] \"soil_clay\"              \"humidity_range\"         \"country_income\"         ## [13] \"soil_sand\"              \"topo_elevation\"         \"topo_slope\"             ## [16] \"country_gdp\"            \"country_population\" selected_predictors_vif ##  [1] \"biogeo_ecoregion\"   \"soil_type\"          \"rainfall_mean\"      ##  [4] \"biogeo_realm\"       \"solar_rad_max\"      \"subregion\"          ##  [7] \"soil_nitrogen\"      \"continent\"          \"soil_soc\"           ## [10] \"topo_diversity\"     \"soil_clay\"          \"country_income\"     ## [13] \"soil_sand\"          \"topo_slope\"         \"country_gdp\"        ## [16] \"country_population\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"target_encoding_lab","dir":"","previous_headings":"Multicollinearity management with the collinear package.","what":"target_encoding_lab()","title":"Multicollinearity Management for Categorical and Numeric Variables","text":"function target_encoding_lab() used within functions package encode categorical variables numeric. implements four target encoding methods: “mean” (target_encoding_mean()): replaces category mean response across category. White noise can added option increase data variability. “rank” (target_encoding_rank()): replaces category rank mean response across category. “rnorm” (target_encoding_rnorm()): replaces value category number generated stats::rnorm() normal distribution mean standard deviation response category. “loo” (target_encoding_loo()): replaces value category mean response across cases within category. White noise can added option increase data variability. method “mean” used default througout functions package, can changed via argument encoding_method. use methods generate different numeric encodings categorical variable “koppen_zone”. relationship encoded versions “koppen_zone” response shown .  function implementing method can used directly well. example shows “mean” method option replace = FALSE, replaces categorical values numeric ones output data frame.","code":"df <- target_encoding_lab(   df = vi,   response = \"vi_mean\",   predictors = \"koppen_zone\",   encoding_methods = c(     \"mean\",     \"rank\",     \"rnorm\",     \"loo\"   ),   seed = 1,   rnorm_sd_multiplier = c(0, 0.01, 0.1),   white_noise = c(0, 0.01, 0.1),   verbose = TRUE ) ## Encoding the variables: ## koppen_zone  ## New encoded predictor: 'koppen_zone__encoded_rank'  ## New encoded predictor: 'koppen_zone__encoded_mean'  ## New encoded predictor: 'koppen_zone__encoded_loo'  ## New encoded predictor: 'koppen_zone__encoded_mean__white_noise_0.01'  ## New encoded predictor: 'koppen_zone__encoded_loo__white_noise_0.01'  ## New encoded predictor: 'koppen_zone__encoded_mean__white_noise_0.1'  ## New encoded predictor: 'koppen_zone__encoded_loo__white_noise_0.1'  ## New encoded predictor: 'koppen_zone__encoded_rnorm'  ## New encoded predictor: 'koppen_zone__encoded_rnorm__sd_multiplier_0.01'  ## New encoded predictor: 'koppen_zone__encoded_rnorm__sd_multiplier_0.1' koppen_zone_encoded <- grep(   pattern = \"*__encoded*\",   x = colnames(df),   value = TRUE )  par(mfrow = c(4, 3)) x <- lapply(   X = koppen_zone_encoded,   FUN = function(x) plot(     x = df[[x]],     y = df$vi_mean,     xlab = x,     ylab = \"vi_mean\",     cex = 0.5     ) ) head(vi[, c(\"vi_mean\", \"koppen_zone\")], n = 10) ##    vi_mean koppen_zone ## 1     0.38         BSk ## 2     0.53         Cfa ## 3     0.45         Dfc ## 4     0.69         Cfb ## 5     0.42          Aw ## 6     0.68         Cfa ## 7     0.70          Af ## 8     0.26         BSh ## 9     0.55         Cwa ## 10    0.16         BWh df <- target_encoding_mean(   df = vi,   response = \"vi_mean\",   predictor = \"koppen_zone\",   replace = TRUE )  head(df[, c(\"vi_mean\", \"koppen_zone\")], n = 10) ##    vi_mean koppen_zone ## 1     0.38   0.2487370 ## 2     0.53   0.5661689 ## 3     0.45   0.4338492 ## 4     0.69   0.5889908 ## 5     0.42   0.5275241 ## 6     0.68   0.5661689 ## 7     0.70   0.6708994 ## 8     0.26   0.3230049 ## 9     0.55   0.5218936 ## 10    0.16   0.1330452"},{"path":"https://blasbenito.github.io/collinear/reference/collinear-package.html","id":null,"dir":"Reference","previous_headings":"","what":"collinear — collinear-package","title":"collinear — collinear-package","text":"Package multicollinearity management data frames numeric categorical variables.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/collinear/reference/collinear-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"collinear — collinear-package","text":"Maintainer: Blas Benito blasbenito@gmail.com (ORCID)","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Autommated multicollinearity management — collinear","title":"Autommated multicollinearity management — collinear","text":"collinear() function automates multicollinearity management data frames combining four methods: Pairwise correlation filtering: Pearson, Spearman, Cramer's V statistics identify pairs highly correlated predictors. Variance Inflation Factor (VIF) filtering: identifies predictors linear combinations predictors. Target encoding: transform categorical predictors numeric using numeric variable reference. Flexible prioritization method: help user select meaningful set non-correlated predictors. Pairwise correlation filtering implemented cor_select(). function applies recursive algorithm remove predictors Pearson correlation another predictor higher given threshold defined argument max_cor.  two predictors correlated threshold, one lowest preference order removed (one highest VIF default). VIF-based filtering implemented vif_select(), removes variables recomputes VIF scores iteratively, variables resulting selection VIF value argument max_vif. VIF given variable y computed 1/(1-R2), R2 R-squared multiple regression model fitted using y response predictors. equation can interpreted \"rate perfect model's R-squared unexplained variance model\". possible range VIF values (1, Inf], recommended thresholds maximum VIF (argument max_vif) may vary, 2.5, 5, 10 values commonly mentioned relevant bibliography. 'response' argument provided, categorical predictors converted numeric via target encoding function target_encoding_lab(), predictors handled numeric multicollinearity filtering. 'response' argument provided, categorical variables ignored. However, case, function cor_select() can handle categorical variables, albeit lower computation speed. argument preference_order allows prioritizing variables might interesting even required given analysis. preference_order provided, predictors ranked lower higher sum absolute correlations predictors cor_select(), VIF vif_select(), removed one one maximum R-squared correlation matrix lower max_cor maximum VIF max_vif. Please note near-zero variance columns identified identify_zero_variance_predictors(), ignored collinear(), cor_select(), vif_select().","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autommated multicollinearity management — collinear","text":"","code":"collinear(   df = NULL,   response = NULL,   predictors = NULL,   preference_order = NULL,   cor_method = \"pearson\",   max_cor = 0.75,   max_vif = 5,   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autommated multicollinearity management — collinear","text":"df (required; data frame tibble) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default: NULL preference_order (optional; character vector) vector column names 'predictors' desired preference order, result function preference_order(). Allows defining priority order selecting predictors, can particularly useful predictors critical analysis others. Predictors included argument ranked Variance Inflation Factor. Default: NULL. cor_method (optional; character string) Method used compute pairwise correlations. Accepted methods \"pearson\" (recommended minimum 30 rows 'df') \"spearman\" (recommended minimum 10 rows 'df'). Default: \"pearson\". max_cor (optional; numeric) Maximum correlation allowed pair predictors. Higher values return larger number predictors higher multicollinearity. Default: 0.75 max_vif (optional, numeric) Numeric recommended values 2.5 10 defining maximum VIF allowed given predictor output dataset. Higher VIF thresholds result higher number selected variables. Default: 5. encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autommated multicollinearity management — collinear","text":"Character vector names uncorrelated predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autommated multicollinearity management — collinear","text":"","code":"if(interactive()){ data(   vi,   vi_predictors )  #reduce size of vi to speed-up example execution vi <- vi[1:1000, ]  #without response #without preference_order #permissive max_cor and max_vif #only numeric variables in output selected.predictors <- collinear(   df = vi,   predictors = vi_predictors,   max_cor = 0.8,   max_vif = 10   )  selected.predictors  #without response #without preference_order #restrictive max_cor and max_vif #only numeric variables in output selected.predictors <- collinear(   df = vi,   predictors = vi_predictors,   max_cor = 0.5,   max_vif = 2.5 )  selected.predictors  #with response #without preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output selected.predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.5,   max_vif = 2.5 )  selected.predictors  #with response #with user-defined preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output selected.predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = c(     \"soil_temperature_mean\",     \"swi_mean\",     \"rainfall_mean\",     \"evapotranspiration_mean\"   ),   max_cor = 0.5,   max_vif = 2.5 )  selected.predictors   #with response #with automated preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared, #cor(response, predictor)   workers = 1 )  selected.predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference.order,   max_cor = 0.5,   max_vif = 2.5 )  selected.predictors }"},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation data frame of numeric and character variables — cor_df","title":"Correlation data frame of numeric and character variables — cor_df","text":"Returns correlation data frame pairs predictors training dataset. Non-numeric predictors transformed numeric via target encoding, using 'response' variable reference.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation data frame of numeric and character variables — cor_df","text":"","code":"cor_df(   df = NULL,   response = NULL,   predictors = NULL,   cor_method = \"pearson\",   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation data frame of numeric and character variables — cor_df","text":"df (required; data frame tibble) data frame numeric /character predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' cor_method (optional; character string) Method used compute pairwise correlations. Accepted methods \"pearson\" (recommended minimum 30 rows 'df') \"spearman\" (recommended minimum 10 rows 'df'). Default: \"pearson\". encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation data frame of numeric and character variables — cor_df","text":"data frame pairs predictors correlation.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation data frame of numeric and character variables — cor_df","text":"function attempts handle correlations pairs variables can different types: numeric vs. numeric: computed stats::cor() methods \"pearson\" \"spearman\". numeric vs. character, two alternatives leading different results: 'response' provided: character variable target-encoded numeric using values response reference, correlation numeric variable computed stats::cor(). option generates response-specific result suitable training statistical machine-learning models 'response' NULL (name non-numeric column): character variable target-encoded numeric using values numeric predictor (instead response) reference, correlation computed stats::cor(). option leads response-agnostic result suitable clustering problems. character vs. character, two alternatives leading different results: 'response' provided: character variables target-encoded numeric using values response reference, correlation computed stats::cor(). response' NULL (name non-numeric column): association character variables computed using Cramer's V. option might problematic, R-squared values Cramer's V, even range 0 1, fully comparable.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation data frame of numeric and character variables — cor_df","text":"","code":"if(interactive()){  data(   vi,   vi_predictors )  #reduce size of vi to speed-up example execution vi <- vi[1:1000, ]  #without response #categorical vs categorical compared with cramer_v() #categorical vs numerical compared wit stats::cor() via target-encoding #numerical vs numerical compared with stats::cor() df <- cor_df(   df = vi,   predictors = vi_predictors )  head(df)  #with response #different solution than previous one #because target encoding is done against the response #rather than against the other numeric in the pair df <- cor_df(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors )   }"},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation matrix of numeric and character variables — cor_matrix","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"Returns correlation matrix pairs predictors training dataset. Non-numeric predictors transformed numeric via target encoding, using 'response' variable reference.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"","code":"cor_matrix(   df = NULL,   response = NULL,   predictors = NULL,   cor_method = \"pearson\",   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"df (required; data frame tibble) data frame numeric /character predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' cor_method (optional; character string) Method used compute pairwise correlations. Accepted methods \"pearson\" (recommended minimum 30 rows 'df') \"spearman\" (recommended minimum 10 rows 'df'). Default: \"pearson\". encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"correlation matrix","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"function attempts handle correlations pairs variables can different types: numeric vs. numeric: computed stats::cor() methods \"pearson\" \"spearman\". numeric vs. character, two alternatives leading different results: 'response' provided: character variable target-encoded numeric using values response reference, correlation numeric variable computed stats::cor(). option generates response-specific result suitable training statistical machine-learning models 'response' NULL (name non-numeric column): character variable target-encoded numeric using values numeric predictor (instead response) reference, correlation computed stats::cor(). option leads response-agnostic result suitable clustering problems. character vs. character, two alternatives leading different results: 'response' provided: character variables target-encoded numeric using values response reference, correlation computed stats::cor(). response' NULL (name non-numeric column): association character variables computed using Cramer's V. option might problematic, R-squared values Cramer's V, even range 0 1, fully comparable.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"","code":"if(interactive()){  data(   vi,   vi_predictors )  #reduce size of vi to speed-up example execution vi <- vi[1:1000, ]  #convert correlation data frame to matrix df <- cor_df(   df = vi,   predictors = vi_predictors )  m <- cor_matrix(   df = df )  #show first three columns and rows #pairs of categoricals m[1:5, 1:5]  #generate correlation matrix directly m <- cor_matrix(   df = vi,   predictors = vi_predictors )  m[1:5, 1:5]  #with response (much faster) #different solution than previous one #because target encoding is done against the response #rather than against the other numeric in the pair m <- cor_matrix(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors )  m[1:5, 1:5]  }"},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated multicollinearity reduction via pairwise correlation — cor_select","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"Applies recursive algorithm remove variables bivariate correlation variable higher threshold defined argument max_cor. argument response provided, non-numeric variables predictors transformed numeric using target encoding (see target_encoding_lab()). Otherwise, non-numeric variables ignored. argument preference_order allows defining preference selection order preserve (possible) variables might interesting even required given analysis. NULL, predictors ordered lower higher sum absolute correlation predictors. example, predictors \"c(\"\", \"b\", \"c\") preference_order \"c(\"\", \"b\"), two possibilities: correlation \"\" \"b\" max_cor, variables selected. correlation equal max_cor, \"\" selected, matter correlation \"c\", preference_order provided, predictors ranked variance inflation factor computed vif_df().","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"","code":"cor_select(   df = NULL,   response = NULL,   predictors = NULL,   preference_order = NULL,   cor_method = \"pearson\",   max_cor = 0.75,   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"df (required; data frame tibble) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) Character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' preference_order (optional; character vector) vector column names 'predictors' desired preference order, result function preference_order(). Allows defining priority order selecting predictors, can particularly useful predictors critical analysis others. Default: NULL (predictors ordered lower higher sum absolute correlation predictors). cor_method (optional; character string) Method used compute pairwise correlations. Accepted methods \"pearson\" (recommended minimum 30 rows 'df') \"spearman\" (recommended minimum 10 rows 'df'). Default: \"pearson\". max_cor (optional; numeric) Maximum correlation allowed pair predictors. Higher values return larger number predictors higher multicollinearity. Default: 0.75 encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"Character vector names selected predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"","code":"if(interactive()){  data(   vi,   vi_predictors )  #reduce size of vi to speed-up example execution vi <- vi[1:1000, ]  #without response #without preference_order #permissive max_cor selected.predictors <- cor_select(   df = vi,   predictors = vi_predictors,   max_cor = 0.8 )  selected.predictors  #without response #without preference_order #restrictive max_cor selected.predictors <- cor_select(   df = vi,   predictors = vi_predictors,   max_cor = 0.5 )  selected.predictors  #with response #without preference_order #restrictive max_cor #slightly different solution than previous one #because here target encoding is done against the response #while before was done pairwise against each numeric predictor selected.predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.5 )  selected.predictors  #with response #with user-defined preference_order #restrictive max_cor #numerics and categorical variables in output selected.predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = c(     \"soil_type\", #categorical variable     \"soil_temperature_mean\",     \"swi_mean\",     \"rainfall_mean\",     \"evapotranspiration_mean\"   ),   max_cor = 0.5 )  selected.predictors   #with response #with automated preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared #cor(response, predictor) )  head(preference.order)  selected.predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference.order,   max_cor = 0.5 )  selected.predictors  }"},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Bias Corrected Cramer's V — cramer_v","title":"Bias Corrected Cramer's V — cramer_v","text":"cramer_v() function calculates bias-corrected Cramer's V, measure association two categorical variables. Cramer's V extension chi-squared test measure strength association two categorical variables. Provides values 0 1, 0 indicates association, 1 indicates perfect association. essence, Cramer's V assesses co-occurrence categories two variables quantify strongly variables related. Even range 0 1, Cramer's V values directly comparable R-squared values, , multicollinearity analysis containing types values must assessed care. probably preferable convert non-numeric variables numeric using target encoding rather multicollinearity analysis.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bias Corrected Cramer's V — cramer_v","text":"","code":"cramer_v(x = NULL, y = NULL, check_input = TRUE)"},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bias Corrected Cramer's V — cramer_v","text":"x (required; character vector) character vector representing categorical variable.  Default: NULL y (required; character vector) character vector representing categorical variable. Must length 'x'. Default: NULL check_input (required; logical) FALSE, disables data checking slightly faster execution. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bias Corrected Cramer's V — cramer_v","text":"Numeric, value Cramer's V","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bias Corrected Cramer's V — cramer_v","text":"","code":"if(interactive()){  #loading example data data(vi)  #computing Cramer's V for two categorical predictors v <- cramer_v(   x = vi$soil_type,   y = vi$koppen_zone   )  v  }"},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes geometry column in sf data frames — drop_geometry_column","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"Replicates functionality sf::st_drop_geometry() without depending sf package.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"","code":"drop_geometry_column(df)"},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"df (required; data frame matrix) Input data frame. Default: NULL","code":""},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"input data frame without geometry column","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":null,"dir":"Reference","previous_headings":"","what":"Explained Deviance from univariate GAM model — f_gam_deviance","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"Computes explained deviance response predictor via Generalized Additive Model (GAM). option slower f_rsquared(), suitable fitting GAMs resulting preference order.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"","code":"f_gam_deviance(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"x (required, character string) name predictor variable. y (required, character string) name response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"Explained deviance","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"","code":"if(interactive()){  data(vi)  f_gam_deviance(   x = \"growing_season_length\", #predictor   y = \"vi_mean\",               #response   df = vi )  }"},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_deviance.html","id":null,"dir":"Reference","previous_headings":"","what":"R-squared of Random Forest model from out-of-bag data — f_rf_deviance","title":"R-squared of Random Forest model from out-of-bag data — f_rf_deviance","text":"Computes univariate random forest model ranger::ranger() returns R-squared --bag data.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_deviance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R-squared of Random Forest model from out-of-bag data — f_rf_deviance","text":"","code":"f_rf_deviance(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_deviance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R-squared of Random Forest model from out-of-bag data — f_rf_deviance","text":"x (required, character string) name predictor variable. y (required, character string) name response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_deviance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R-squared of Random Forest model from out-of-bag data — f_rf_deviance","text":"R-squared","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_deviance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R-squared of Random Forest model from out-of-bag data — f_rf_deviance","text":"","code":"if(interactive()){  data(vi)  f_rf_deviance(   x = \"growing_season_length\", #predictor   y = \"vi_mean\",               #response   df = vi )  }"},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":null,"dir":"Reference","previous_headings":"","what":"R-squared between a response and a predictor — f_rsquared","title":"R-squared between a response and a predictor — f_rsquared","text":"Computes R-squared response predictor. Fastest option compute preference order.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R-squared between a response and a predictor — f_rsquared","text":"","code":"f_rsquared(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R-squared between a response and a predictor — f_rsquared","text":"x (required, character string) name predictor variable. y (required, character string) name response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R-squared between a response and a predictor — f_rsquared","text":"R-squared","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R-squared between a response and a predictor — f_rsquared","text":"","code":"if(interactive()){  data(vi)  f_rsquared(   x = \"growing_season_length\", #predictor   y = \"vi_mean\",               #response   df = vi )  }"},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify non-numeric predictors — identify_non_numeric_predictors","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"Given 'df' 'predictors' arguments, function subsets returns non-numeric (character, factor, logical) predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"","code":"identify_non_numeric_predictors(df = NULL, predictors = NULL)"},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"df (required; data frame tibble) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. predictors (optional; character vector) vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL'","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"character vector names numeric predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"","code":"if (interactive()) {  data(   vi,   vi_predictors )  non.numeric.predictors <- identify_non_numeric_predictors(   df = vi,   predictors = vi_predictors )  non.numeric.predictors  }"},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify numeric predictors — identify_numeric_predictors","title":"Identify numeric predictors — identify_numeric_predictors","text":"Given 'df' 'predictors' arguments, function subsets returns numeric predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify numeric predictors — identify_numeric_predictors","text":"","code":"identify_numeric_predictors(df = NULL, predictors = NULL)"},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify numeric predictors — identify_numeric_predictors","text":"df (required; data frame tibble) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. predictors (optional; character vector) vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL'","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify numeric predictors — identify_numeric_predictors","text":"character vector names numeric predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify numeric predictors — identify_numeric_predictors","text":"","code":"if (interactive()) {  data(   vi,   vi_predictors )  numeric.predictors <- identify_numeric_predictors(   df = vi,   predictors = vi_predictors )  numeric.predictors  }"},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"Predictors variance zero near zero highly problematic multicollinearity analysis modelling general. function identifies predictors level sensitivity defined 'decimals' argument. Smaller number decimals increase number variables detected near zero variance. Recommended values depend range numeric variables 'df'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"","code":"identify_zero_variance_predictors(df = NULL, predictors = NULL, decimals = 4)"},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"df (required; data frame tibble) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. predictors (optional; character vector) vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' decimals (required, integer) number decimal places zero variance test. Default: 4","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"character vector names zero near-zero variance columns.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"","code":"if (interactive()) {  data(   vi,   vi_predictors )  #create zero variance predictors vi$zv_1 <- 1 vi$zv_2 <- runif(n = nrow(vi), min = 0, max = 0.0001)   #add to vi predictors vi_predictors <- c(   vi_predictors,   \"zv_1\",   \"zv_2\" )  #identify zero variance predictors zero.variance.predictors <- identify_zero_variance_predictors(   df = vi,   predictors = vi_predictors )  zero.variance.predictors  }"},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the preference order for predictors based on a user-defined function. — preference_order","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"function calculates preference order predictors based user-provided function takes predictor, response, data frame arguments.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"","code":"preference_order(   df = NULL,   response = NULL,   predictors = NULL,   f = f_rsquared,   encoding_method = \"mean\",   workers = 1 )"},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"df (required; data frame tibble) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (required, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' f (optional: function) function returns value representing relationship given predictor response. Higher values ranked higher. available options : f_rsquared (default option): returns R-squared correlation response predictor. f_lm_coef: returns absolute coefficient linear model response scaled predictor. f_gam_deviance: returns explained deviance GAM model response predictor. Requires package mgcv. f_f_variance: returns explained deviance random forest model response predictor. Requires package ranger. encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\" workers (integer) number workers parallel execution. Default: 1","code":""},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"data frame columns \"predictor\" \"value\". former contains predictors names order, ready argument preference_order cor_select(), vif_select() collinear(). latter contains result function f combination predictor response.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"","code":"if(interactive()){  data(   vi,   vi_predictors )  #reduce size of vi to speed-up example execution vi <- vi[1:1000, ]  #computing preference order #with response #numerics and categoricals in the output #as the R-squared between each predictor and the response preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared,   workers = 1   )  preference.order  #using it in variable selection with collinear() selected.predictors <- cor_select(   df = vi,   response = \"vi_mean\", #don't forget the response!   predictors = vi_predictors,   preference_order = preference.order,   max_cor = 0.75   )  selected.predictors  #check their correlations selected.predictors.cor <- cor_df(   df = vi,   response = \"vi_mean\",   predictors = selected.predictors )  #all correlations below max_cor selected.predictors.cor  #USING A CUSTOM FUNCTION #custom function to compute RMSE between a predictor and a response #x is a predictor name #y is a response name #df is a data frame with multiple predictors and one response #must return a single number, with higher number indicating higher preference #notice we use \"one minus RMSE\" to give higher rank to variables with lower RMSE f_rmse <- function(x, y, df){    xy <- df[, c(x, y)] |>     na.omit() |>     scale()    1 - sqrt(mean((xy[, 1] - xy[, 2])^2))  }  preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rmse,   workers = 1 )  preference.order  }"},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":null,"dir":"Reference","previous_headings":"","what":"Target encoding of non-numeric variables — target_encoding_lab","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"Target encoding involves replacing values categorical variables numeric ones \"target variable\", usually model's response. Target encoding can useful improving performance machine learning models. function identifies categorical variables input data frame, transforms using set target-encoding methods selected user, returns input data frame newly encoded variables. target encoding methods implemented function : \"rank\": Returns rank group integer, starting 1 rank group lower mean response variable. variables returned method named suffix \"__encoded_rank\". method implemented function target_encoding_rank(). \"mean\": Replaces value categorical variable mean response across category given value belongs . option accepts argument \"white_noise\" limit potential overfitting. variables returned method named suffix \"__encoded_mean\". method implemented function target_encoding_mean(). \"rnorm\": Computes mean standard deviation response group categorical variable, uses rnorm() generate random values normal distribution parameters. argument rnorm_sd_multiplier used multiplier standard deviation control range values produced rnorm() group categorical predictor. variables returned method named suffix \"__encoded_rnorm\".  method implemented function target_encoding_rnorm(). \"loo\": leave-one-method, replaces categorical value mean response variable across cases within group. method supports white_noise argument increase limit potential overfitting. variables returned method named suffix \"__encoded_loo\". method implemented function target_encoding_loo(). methods \"mean\" \"rank\" support white_noise argument, fraction range response variable, maximum possible value white noise added. example, response within 0 1, white_noise 0.25 add every value encoded variable random number selected normal distribution -0.25 0.25. argument helps control potential overfitting induced encoded variable. method \"rnorm\" argument rnorm_sd_multiplier, multiplies standard deviation argument stats::rnorm() function lcontrol spread encoded values groups. Values smaller 1 reduce spread results, values larger 1 opposite effect.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"","code":"target_encoding_lab(   df = NULL,   response = NULL,   predictors = NULL,   encoding_methods = c(\"mean\", \"rank\", \"loo\", \"rnorm\"),   rnorm_sd_multiplier = 0,   seed = 1,   white_noise = 0,   replace = FALSE,   verbose = TRUE )"},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"df (required; data frame, tibble, sf) training data frame. Default: NULL response (required; character string) Name response. Must column name df. Default: NULL predictors (required; character vector) Names predictors df. character factor predictors processed, returned \"df\" slot function's output.  Default: NULL encoding_methods (optional; character string vector). Name target encoding methods. Default: c(\"mean\", \"rank\", \"loo\", \"rnorm\") rnorm_sd_multiplier (optional; numeric) Numeric multiplicator standard deviation group categorical variable, range 0-1. Controls variability encoded variables mitigate potential overfitting. Default: 1 seed (optional; integer) Random seed facilitate reproducibility white_noise 0. Default: 1 white_noise (optional; numeric) Numeric white noise values range 0-1, representing fraction range response added noise encoded variable. Controls variability encoded variables mitigate potential overfitting. Default: 0. replace (optional; logical) TRUE, function replaces categorical variable encoded version, returns input data frame encoded variables instead original ones. Default: FALSE verbose (optional; logical) TRUE, messages generated execution function printed console Default: TRUE","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"target encoding needed predictors numeric, function returns df. Otherwise returns list slots: df: Input data frame, target-encoded character factor columns. correlation_test: Data frame results linear model target-encoded variable response. contains following columns: encoded_predictor: name target-encoded variable. correlation_with_response: R-squared resulting cor.test() target-encoded variable response. option replace TRUE, input data frame returned categorical variables replaced encoded versions.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"","code":"if(interactive()){  #loading example data data(   vi,   vi_predictors   )  #reduce size of vi to speed-up example runtime vi <- vi[1:1000, ]  #applying all methods for a continuous response df <- target_encoding_lab(   df = vi,   response = \"vi_mean\",   predictors = \"koppen_zone\",   encoding_methods = c(     \"mean\",     \"rank\",     \"rnorm\",     \"loo\"   ),   rnorm_sd_multiplier = c(0, 0.1, 0.2),   white_noise = c(0, 0.1, 0.2) )  #identify encoded predictors predictors.encoded <- grep(   pattern = \"*__encoded*\",   x = colnames(df),   value = TRUE )  #correlation between encoded predictors and the response stats::cor(   x = df[[\"vi_mean\"]],   y = df[, predictors.encoded],   use = \"pairwise.complete.obs\" )  #plot encoded predictors vs response par(mfrow = c(4, 3)) x <- lapply(   X = predictors.encoded,   FUN = function(x) plot(     x = df[[x]],     y = df$vi_mean,     xlab = x,     ylab = \"vi_mean\"     ) )  #reset plotting parameters dev.off()  }"},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Target-encoding methods — target_encoding_mean","title":"Target-encoding methods — target_encoding_mean","text":"Methods apply target-encoding individual categorical variables. functions implemented : target_encoding_mean(): group identified mean response group cases. White noise can added via white_noise argument. Columns encoded function identified suffix \"__encoded_mean\". white_noise used, amount white noise also added suffix. target_encoding_rank(): group identified rank mean response variable group cases. group lower mean receives rank 1. White noise can added via white_noise argument. Columns encoded function identified suffix \"__encoded_rank\". white_noise used, amount noise also added suffix. target_encoding_rnorm(): case group receives value coming normal distribution mean standard deviation response cases group. argument rnorm_sd_multiplier multiplies standard deviation reduce spread obtained values. Columns encoded function identified suffix \"__encoded_rnorm_rnorm_sd_multiplier_X\", X amount rnorm_sd_multiplier used. target_encoding_loo(): suffix \"loo\" stands \"leave-one-\". case group encoded average response cases group. olumns encoded function identified suffix \"__encoded_loo\".","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target-encoding methods — target_encoding_mean","text":"","code":"target_encoding_mean(   df,   response,   predictor,   white_noise = 0,   seed = 1,   replace = FALSE,   verbose = TRUE )  target_encoding_rnorm(   df,   response,   predictor,   rnorm_sd_multiplier = 1,   seed = 1,   replace = FALSE,   verbose = TRUE )  target_encoding_rank(   df,   response,   predictor,   seed = 1,   replace = FALSE,   verbose = TRUE )  target_encoding_loo(   df,   response,   predictor,   white_noise = 0,   seed = 1,   replace = FALSE,   verbose = TRUE )  add_white_noise(df, response, predictor, white_noise = 0.1, seed = 1)"},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target-encoding methods — target_encoding_mean","text":"df (required; data frame, tibble, sf) training data frame. Default: NULL response (required; character string) Name response. Must column name df. Default: NULL predictor (required; character) Name categorical variable encode. white_noise (optional; numeric) Numeric white noise values range 0-1, representing fraction range response added noise encoded variable. Controls variability encoded variables mitigate potential overfitting. Default: 0. seed (optional; integer) Random seed facilitate reproducibility. Default: 1 replace (optional; logical) Advanced option changes behavior function. Use really know exactly need. TRUE, replaces categorical variable encoded version, returns input data frame replaced variables. verbose (optional; logical) TRUE, messages plots generated execution function displayed. Default: TRUE rnorm_sd_multiplier (optional; numeric) Numeric multiplicator standard deviation group categorical variable, range 0-1. Controls variability encoded variables mitigate potential overfitting. Default: 1","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target-encoding methods — target_encoding_mean","text":"input data frame target-encoded variable.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target-encoding methods — target_encoding_mean","text":"","code":"if(interactive()){  data(vi)  #mean encoding #-------------  #without noise df <- target_encoding_mean(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )  #with noise df <- target_encoding_mean(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   white_noise = 0.1,   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )   #group rank #----------  df <- target_encoding_rank(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )   #leave-one-out #-------------  #without noise df <- target_encoding_loo(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )  #with noise df <- target_encoding_loo(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   white_noise = 0.1,   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )   #rnorm #-----  #without sd multiplier df <- target_encoding_rnorm(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )  #with sd multiplier df <- target_encoding_rnorm(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   rnorm_sd_multiplier = 0.1,   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )  }"},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate and pre-process input data — validate_df","title":"Validate and pre-process input data — validate_df","text":"Internal function validate prepare input data frame multicollinearity analysis. Validates data frame ensure complies requirements package functions. function performs following actions: Stops 'df' NULL. Stops 'df' coerced data frame. Stops 'df' zero rows. Removes geometry column input data frame \"sf\" object. Removes non-numeric columns many unique values rows df . Raise warning number rows 'df' lower 'min_rows'. Converts logical columns numeric. Converts factor ordered columns character. Tags data frame attribute validated = TRUE let package functions skip data validation.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate and pre-process input data — validate_df","text":"","code":"validate_df(df = NULL, min_rows = 30)"},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate and pre-process input data — validate_df","text":"df (required; data frame matrix) Input data frame. Default: NULL min_rows (required; integer) Minimum number rows required pairwise correlation variance inflation factor analysis. Default: 30","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate and pre-process input data — validate_df","text":"input data frame modified comply requirements functions package","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate and pre-process input data — validate_df","text":"","code":"if (interactive()) {  data(vi)  #validating example data frame vi <- validate_df(   df = vi )  #tagged as validated attributes(vi)$validated  }"},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate and preprocess the 'predictors' argument for analysis — validate_predictors","title":"Validate and preprocess the 'predictors' argument for analysis — validate_predictors","text":"Requires argument 'df' validated validate_df(). Validates preprocesses 'predictors' argument ensure complies requirements package functions. performs following actions: Stops 'df' NULL. Stops 'df' validated. 'predictors' NULL, uses column names 'df' 'predictors' 'df' data frame. Raise warning names 'predictors' column names 'df', returns ones 'df'. Stop number numeric columns 'predictors' smaller 'min_numerics'. Raise warning zero-variance columns 'predictors' returns new 'predictors' argument without . Tags vector attribute validated = TRUE let package functions skip data validation.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate and preprocess the 'predictors' argument for analysis — validate_predictors","text":"","code":"validate_predictors(   df = NULL,   predictors = NULL,   min_numerics = 0,   decimals = 4 )"},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate and preprocess the 'predictors' argument for analysis — validate_predictors","text":"df (required; data frame tibble) validated data frame numeric /character predictors, optionally, response variable. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:NULL min_numerics (required, integer) Minimum number numeric predictors required. Default: 1 decimals (required, integer) Number decimal places zero variance test. Smaller numbers increase number variables detected near-zero variance. Recommended values depend range numeric variables 'df'. Default: 4","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate and preprocess the 'predictors' argument for analysis — validate_predictors","text":"character vector validated predictor names","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate and preprocess the 'predictors' argument for analysis — validate_predictors","text":"","code":"if (interactive()) {  data(   vi,   vi_predictors   )  #validating example data frame vi <- validate_df(   df = vi )  #validating example predictors vi_predictors <- validate_predictors(   df = vi,   predictors = vi_predictors )  #tagged as validated attributes(vi_predictors)$validated  }"},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"Requires argument 'df' validated validate_df().","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"","code":"validate_response(df = NULL, response = NULL, decimals = 4)"},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"df (required; data frame tibble) validated data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (optional, character string) Name numeric response variable. Character response variables ignored. Default: NULL. decimals (required, integer) number decimal places zero variance test. Default: 4","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"character string name response","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"","code":"if (interactive()) {  data(   vi )  #validating example data frame vi <- validate_df(   df = vi )  #validating example predictors response <- validate_response(   df = vi,   response = \"vi_mean\" )  #tagged as validated attributes(response)$validated  }"},{"path":"https://blasbenito.github.io/collinear/reference/vi.html","id":null,"dir":"Reference","previous_headings":"","what":"30.000 records of responses and predictors all over the world — vi","title":"30.000 records of responses and predictors all over the world — vi","text":"30.000 records responses predictors world","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"30.000 records of responses and predictors all over the world — vi","text":"","code":"data(vi)"},{"path":"https://blasbenito.github.io/collinear/reference/vi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"30.000 records of responses and predictors all over the world — vi","text":"Data frame 30.000 rows 67 columns.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/collinear/reference/vi_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictor names in data frame 'vi' — vi_predictors","title":"Predictor names in data frame 'vi' — vi_predictors","text":"Predictor names data frame 'vi'","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vi_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictor names in data frame 'vi' — vi_predictors","text":"","code":"data(vi_predictors)"},{"path":"https://blasbenito.github.io/collinear/reference/vi_predictors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Predictor names in data frame 'vi' — vi_predictors","text":"Character vector predictor names.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance Inflation Factor — vif_df","title":"Variance Inflation Factor — vif_df","text":"Computes Variance Inflation Factor variables training data frame. Variance Inflation Factor given variable y computed 1/(1-R2), R2 multiple R-squared multiple regression model fitted using y response remaining variables input data set predictors. equation can interpreted \"rate perfect model's R-squared unexplained variance model\". possible range VIF values (1, Inf]. VIF lower 10 suggest removing y data set reduce overall multicollinearity. function computes Variance Inflation Factor (VIF) three steps: Computes correlation matrix pairs predictors using stats::cor(). Applies solve() obtain precision matrix, inverse covariance matrix. Uses diag() extract diagonal precision matrix, contains variance prediction predictor predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance Inflation Factor — vif_df","text":"","code":"vif_df(df = NULL, response = NULL, predictors = NULL, encoding_method = \"mean\")"},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance Inflation Factor — vif_df","text":"df (required; data frame tibble) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance Inflation Factor — vif_df","text":"Data frame predictor names VIF values","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance Inflation Factor — vif_df","text":"","code":"if(interactive()){  data(   vi,   vi_predictors )  #reduce size of vi to speed-up example execution vi <- vi[1:1000, ]  #without response #only numeric predictors are returned df <- vif_df(   df = vi,   predictors = vi_predictors )  df  #with response #categorical and numeric predictors are returned df <- vif_df(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors )  df  }"},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"Automates multicollinearity management selecting variables based Variance Inflation Factor (VIF). vif_select() function designed automate reduction multicollinearity set predictors using Variance Inflation Factors. 'response' argument provided, categorical predictors converted numeric via target encoding (see target_encoding_lab()). 'response' argument provided, categorical variables ignored. Variance Inflation Factor given variable y computed 1/(1-R2), R2 multiple R-squared multiple regression model fitted using y response predictors input data frame predictors. VIF equation can interpreted \"rate perfect model's R-squared unexplained variance model\". possible range VIF values (1, Inf]. VIF lower 10 suggest removing y data set reduce overall multicollinearity. recommended thresholds maximum VIF may vary depending source consulted, common values, 2.5, 5, 10. function vif_select() applies recursive algorithm remove variables VIF higher given threshold (defined argument max_vif). argument response provided, non-numeric variables predictors transformed numeric using target encoding (see target_encoding_lab()). Otherwise, non-numeric variables ignored. argument preference_order allows defining preference selection order preserve (possible) variables might interesting even required given analysis. example, predictors \"c(\"\", \"b\", \"c\") preference_order \"c(\"\", \"b\"), two possibilities: VIF \"\" higher VIF \"b\", VIF values max_vif, \"\" selected \"b\" removed. correlation equal max_cor, \"\" selected, matter correlation \"c\", preference_order provided, predictors ranked variance inflation factor computed vif_df().","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"","code":"vif_select(   df = NULL,   response = NULL,   predictors = NULL,   preference_order = NULL,   max_vif = 5,   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"df (required; data frame tibble) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' preference_order (optional; character vector) vector column names 'predictors' desired preference order, result function preference_order(). Allows defining priority order selecting predictors, can particularly useful predictors critical analysis others. Predictors included argument ranked Variance Inflation Factor. Default: NULL. max_vif (optional, numeric) Numeric recommended values 2.5 10 defining maximum VIF allowed given predictor output dataset. Higher VIF thresholds result higher number selected variables. Default: 5. encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"Character vector names selected predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"","code":"if(interactive()){  data(   vi,   vi_predictors )  #reduce size of vi to speed-up example execution vi <- vi[1:1000, ]  #without response #without preference_order #permissive max_vif #only numeric predictors are processed selected.predictors <- vif_select(   df = vi,   predictors = vi_predictors,   max_vif = 10 )  selected.predictors  #without response #without preference_order #restrictive max_vif #only numeric predictors are processed selected.predictors <- vif_select(   df = vi,   predictors = vi_predictors,   max_vif = 2.5 )  selected.predictors  #with response #without preference_order #restrictive max_cor #slightly different solution than previous one #because categorical variables are target-enccoded selected.predictors <- vif_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_vif = 2.5 )  selected.predictors  #with response #with user-defined preference_order #restrictive max_cor #numerics and categorical variables in output selected.predictors <- vif_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = c(     \"soil_type\", #categorical variable     \"soil_temperature_mean\",     \"swi_mean\",     \"rainfall_mean\",     \"evapotranspiration_mean\"   ),   max_vif = 2.5 )  selected.predictors   #with response #with automated preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared #cor(response, predictor) )  head(preference.order)  selected.predictors <- vif_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference.order,   max_vif = 2.5 )  selected.predictors  }"},{"path":[]},{"path":"https://blasbenito.github.io/collinear/news/index.html","id":"collinear-100","dir":"Changelog","previous_headings":"","what":"collinear 1.0.0","title":"collinear 1.0.0","text":"First functional version package.","code":""}]
